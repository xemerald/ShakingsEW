# coding:utf-8
# using python version 2
import os
import time
import datetime
import sys
import facebook

##
FacebookAPI = None
FacebookCFG = { "page_id": "YOUR_PAGES_ID",
				"access_token": "YOUR_ACCESS_TOKEN" }

#
#
#
def main():
	global FacebookAPI
	global FacebookCFG

# Check the number of arguments
	argc = len(sys.argv)
	if ( argc < 7 ):
		print "Usage: python post_facebook.py start_time end_time report_time magnitude trig_stations filename_1 [filename_2]..."
		return
# Connect to the facebook api using the set token
	if FacebookAPI is None:
		FacebookAPI = get_fb_api(FacebookCFG)
# Generate the message of this post
	msg_fb = gen_msg_str( gen_timestamp(sys.argv[2]), gen_report_str(int(sys.argv[3])), sys.argv[1], sys.argv[5] )
# Post the picture on the wall
	posted_id = []
	for filename in sys.argv[6:]:
		posted_id.append(post_pic2fb(filename))
#
	attached_media = []
	for pid in posted_id:
		attached_media.append('{"media_fbid":"'+pid["id"]+'"}')
	post_feed2fb(msg_fb, attached_media)
	return

#
#
#
def post_feed2fb(message, attached_media = []):
	global FacebookAPI
	args = dict()
	args["message"] = message
	i = 0
	for amedia in attached_media:
		args["attached_media["+str(i)+"]"] = attached_media[i]
		i = i + 1
	posted_id = FacebookAPI.request( path = "/me/feed", args = None, post_args = args, method = "POST" )
	return posted_id

#
#
#
def post_pic2fb(picfile):
	global FacebookAPI
	with open(picfile, "rb") as image:
		posted_image_id = FacebookAPI.put_photo( image = image, published = "false" )
	return posted_image_id

#
#
#
def get_fb_api(cfg):
	page_access_token = None

	graph = facebook.GraphAPI(cfg["access_token"])
	resp  = graph.get_object("me/accounts")
	for page in resp["data"]:
		if page["id"] == cfg["page_id"]:
			page_access_token = page["access_token"]

	graph = facebook.GraphAPI(page_access_token)
	return graph

#
#
#
def gen_msg_str(timestamp, report_str, evtid, trig_stations):
	result = ("Automatically Plotted Shakemaps:\n"
				"* " + timestamp + "\n"
				"* Evt. " + evtid + ", " + report_str + "\n"
				"* Total " + trig_stations + " triggered stations\n"
				"\n\nNote: These shakemaps are automatically generated by EEW system, P-Alert. "
				"Not yet confirmed, for reference only!")
	return result

#
#
#
def gen_timestamp(endtime):
	result = "{}-{}-{} {}:{}:{} (UTC+08:00, Taipei)".format(str(endtime[:4]), str(endtime[4:6]), str(endtime[6:8]),
		str(endtime[8:10]), str(endtime[10:12]), str(endtime[12:14]))
	return result

#
#
#
def gen_report_str(report_time):
	result = ""
	if ( report_time == 0 ):
		result = "First Report."
	elif ( report_time < 0 ):
		result = "Final Report."
	else:
		_timestr = ""
		if ( report_time > 60 ):
			_timestr = str(report_time / 60) + "m" + str(report_time % 60) + "s"
		else:
			_timestr = str(report_time) + "s"
		result = _timestr + " after trig."
	return result

#
#
#
if __name__ == "__main__":
	main()
